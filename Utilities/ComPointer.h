//============================================================
//!	@file		ComPointer.h
//!	@brief		Comテンプレートポインタークラス
//!	@note		LastEdited 2013/11/18
//!	@author		ＯＨ教務部ゲーム学科有志
//============================================================

// インクルードガード
#ifndef _INC_COMPOINTER_H
#define _INC_COMPOINTER_H

#include <Windows.h>

//============================================================
//!	@class	ComPointer
//!	@brief	Comポインタークラス
//============================================================
template <class T>
class ComPointer
{
//============================================================
// メンバ
//============================================================
	T* m_pInterface;	//!< @brief 保持しているComポインターアドレス
	
//============================================================
// シークレットメソッド
//============================================================
protected:
	// 参照カウンタ増加
	void AddRef(T* pInterface){
		pInterface -> AddRef();
	}
	// 参照カウンタ減少
	void Release( T* pInterface ){
		m_pInterface -> Release();
	};
	
//============================================================
// コンストラクタ&デストラクタ
//============================================================
public:
	//============================================================
	//!	@fn		ComPointer
	//!	@brief	デフォルトコンストラクタ
	//!	@param	pInterface 格納するインターフェース
	//!	@param	add 加算フラグ
	//============================================================
	explicit ComPointer( T* pInterface = NULL, bool add = false )
	{
		if( pInterface && add ){
			AddRef(pInterface );
		}
		m_pInterface = pInterface;
	}
	
	//============================================================
	//!	@fn		ComPointer
	//!	@brief	コピーコンストラクタ
	//!	@param	src コピー元のComポインター
	//============================================================
	ComPointer( const ComPointer& src )
	{
		// コピー元の参照カウンタを1つ増やす
		if( src.m_pInterface ){
			AddRef(src.m_pInterface);
		}
		
		// コピー
		m_pInterface = src.m_pInterface;
	}
	
	//============================================================
	//!	@fn		~ComPointer
	//!	@brief	デストラクタ
	//============================================================
	virtual ~ComPointer( void )
	{
		if(m_pInterface){
			Release( m_pInterface );
		}
	}
	
//============================================================
// 演算子のオーバーロード
//============================================================
public:
	//============================================================
	//!	@fn		operator =
	//!	@param	src コピー元Comポインタ
	//!	@brief	=演算子のオーバーロード
	//============================================================
	ComPointer& operator =(const ComPointer& src ){
		// 自分のインターフェースの参照カウンタを1つ減らす
		if( m_pInterface ){
			Release( m_pInterface );
		}
		
		// コピー元の参照カウンタを1つ増やす
		if(src.m_pInterface){
			AddRef(src.m_pInterface);
		}
		
		// コピー
		m_pInterface = src.m_pInterface;
		
		return (*this);
	}
	
	//============================================================
	//!	@brief	=演算子のオーバーロード(インターフェイス登録)
	//!	@param	pInterface 登録するインターフェースアドレス
	//============================================================
	void operator =( T* pInterface )
	{
		// 自分のインターフェイスの参照カウンタを1つ減らす
		if(m_pInterface)
		{
			Release(m_pInterface);
		}
		// コピー
		m_pInterface = pInterface;
	}
	
//============================================================
// メソッド
//============================================================
public:
	//============================================================
	//!	@fn		GerPtr
	//!	@brief	ポインタ取得
	//!	@return	持っているインターフェースポインタ
	//============================================================
	T* GetPtr( void )
	{
		return m_pInterface;
	}
	
	//============================================================
	//!	@fn		GetPtrPtr
	//!	@brief	ポインタのアドレスを取得
	//!	@return	所持しているインターフェースのポインタのポインタ
	//============================================================
	T** GetPtrPtr( void )
	{
		return &m_pInterface;
	}
	
	T* operator ->( void ){ return m_pInterface; }
	//============================================================
	//!	@fn		ToCreater
	//!	@brief	インターフェース生成関数へ渡す専用関数
	//!	@return	所持しているインターフェースのポインタのポインタ
	//============================================================
	T** ToCreater( void )
	{
		if( m_pInterface )
		{
			m_pInterface -> Release();
		}
		
		return &m_pInterface;
	}
};

#define cp ComPointer
#endif

//EOF